<?php

require_once __DIR__ . "/../src/mphpd.php";

use FloFaber\MphpD;
use PHPUnit\Framework\TestCase;

class PlayerTest extends TestCase
{

  private MphpD $mphpd;

  public function __construct(?string $name = null, array $data = [], $dataName = '')
  {
    parent::__construct($name, $data, $dataName);
    $this->mphpd = new MphpD();
    $this->mphpd->connect();
  }

  protected function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    $this->mphpd->player()->stop();
    $this->mphpd->queue()->clear();
    $this->mphpd->playlist("test")->load();
  }

  public function __destruct()
  {
    $this->mphpd->player()->stop();
    $this->mphpd->queue()->clear();
  }

  public function testSeek()
  {
    $ret = $this->mphpd->player()->seek(4, 5);
    $this->assertTrue($ret);
  }

  public function testSeek_cur()
  {
    $this->mphpd->player()->play();
    $ret = $this->mphpd->player()->seek_cur(5);
    $this->assertTrue($ret);
  }

  public function testVolume()
  {
    $this->mphpd->player()->play();
    $this->assertIsInt($this->mphpd->player()->volume());
    $this->assertTrue($this->mphpd->player()->volume(10));
  }

  public function testPrevious()
  {
    $this->mphpd->player()->play();
    $this->assertTrue($this->mphpd->player()->previous());
  }

  public function testPlay()
  {
    $this->assertTrue($this->mphpd->player()->play());
    $this->assertTrue($this->mphpd->player()->play(5));
    $this->assertFalse($this->mphpd->player()->play(999999));
  }

  public function testReplay_gain_mode()
  {
    $this->assertTrue($this->mphpd->player()->replay_gain_mode("auto"));
  }

  public function testReplay_gain_status()
  {
    $this->mphpd->player()->replay_gain_mode("off");
    $this->assertSame("off", $this->mphpd->player()->replay_gain_status()["replay_gain_mode"]);
  }

  public function testCurrent_song()
  {
    $this->mphpd->player()->play(5);
    $ret = $this->mphpd->player()->current_song();
    $this->assertIsArray($ret);
    $this->assertArrayHasKey("file", $ret);
  }

  public function testCrossfade()
  {
    $this->assertTrue($this->mphpd->player()->crossfade(10));
    $this->assertSame(10, $this->mphpd->status([ "xfade" ]));
  }

  public function testStop()
  {
    $this->assertTrue($this->mphpd->player()->stop());
    $this->assertSame("stop", $this->mphpd->status([ "state" ]));
  }

  public function testConsume()
  {
    $this->assertTrue($this->mphpd->player()->consume(MPD_STATE_ON));
    $this->assertTrue($this->mphpd->player()->consume(MPD_STATE_OFF));
    if($this->mphpd->version_bte("0.24")){
      $this->assertTrue($this->mphpd->player()->consume(MPD_STATE_ONESHOT));
    }else{
      $this->expectException(\FloFaber\MPDException::class);
      $this->mphpd->player()->consume(MPD_STATE_ONESHOT);
    }
  }

  public function testNext()
  {
    $this->mphpd->player()->play();
    $this->assertTrue($this->mphpd->player()->next());
  }

  public function testMixramp_delay()
  {
    $this->assertTrue($this->mphpd->player()->mixramp_delay(5));
  }

  public function testMixramp_db()
  {
    $this->assertTrue($this->mphpd->player()->mixramp_db(1));
  }

  public function testRandom()
  {
    $this->assertTrue($this->mphpd->player()->random(MPD_STATE_ON));
    $this->assertTrue($this->mphpd->player()->random(MPD_STATE_OFF));
  }

  public function testPlay_id()
  {
    $this->assertTrue($this->mphpd->player()->play_id(0));
  }

  public function testSingle()
  {
    $this->assertTrue($this->mphpd->player()->single(MPD_STATE_ON));
    $this->assertTrue($this->mphpd->player()->single(MPD_STATE_OFF));
    if($this->mphpd->version_bte("0.21")){
      $this->assertTrue($this->mphpd->player()->single(MPD_STATE_ONESHOT));
    }else{
      $this->assertFalse($this->mphpd->player()->single(MPD_STATE_ONESHOT));
    }
  }

  public function testPause()
  {
    $this->assertTrue($this->mphpd->player()->pause());
  }

  public function testRepeat()
  {
    $this->assertTrue($this->mphpd->player()->repeat(MPD_STATE_ON));
    $this->assertTrue($this->mphpd->player()->repeat(MPD_STATE_OFF));
  }

  public function testSeek_id()
  {
    $ret = $this->mphpd->player()->seek_id(0, 5);
    $this->assertTrue($ret);
  }
}
