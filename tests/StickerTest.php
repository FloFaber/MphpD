<?php declare(strict_types=1);

require_once __DIR__ . "/config/config.php";
require_once __DIR__ . "/../src/MphpD.php";

use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\Attributes\CoversClass;
use FloFaber\MphpD\MphpD;

#[CoversClass(\FloFaber\MphpD\Sticker::class)]
final class StickerTest extends TestCase
{

  private MphpD $mphpd;

  /*public function __construct(?string $name = null, array $data = [], $dataName = '')
  {
    parent::__construct($name, $data, $dataName);

  }*/


  // setUp and tearDown run for each test
  public function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub

    $this->mphpd = new MphpD(MPD_CONFIG);
    $this->mphpd->connect();

    //$this->mphpd->sticker("song", "test-song1.mp3")->set("test1", "asdf1");
    //$this->mphpd->sticker("song", "test-song1.mp3")->set("test2", "asdf2");
    //$this->mphpd->sticker("song", "test-song1.mp3")->set("counter", 2);
  }

  public function tearDown(): void
  {
    parent::tearDown(); // TODO: Change the autogenerated stub
    $this->mphpd->sticker("song", "test-song1.mp3")->delete("test1");
    $this->mphpd->sticker("song", "test-song1.mp3")->delete("test2");
    $this->mphpd->sticker("song", "test-song1.mp3")->delete("test3");
    $this->mphpd->sticker("song", "test-song2.mp3")->delete("test1");

    $this->mphpd->sticker("song", "test-song1.mp3")->delete("counter1");
    $this->mphpd->sticker("song", "test-song1.mp3")->delete("counter2");
    $this->mphpd->sticker("song", "test-song1.mp3")->delete("counter3");

    $this->mphpd->disconnect();
  }

  public function testSticker()
  {
    $this->mphpd->sticker("song", "test-song1.mp3")->set("test1", "asdf1");
    $this->mphpd->sticker("song", "test-song1.mp3")->set("test2", 8675309);

    $r = $this->mphpd->stickers();
    $this->assertSame([ "test1", "test2" ], $r["names"]);
    $this->assertContains("filter", $r["types"]);
  }

  public function testSet()
  {
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("test1", "asdf1"));
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("test2", 8675309));
  }

  public function testGet()
  {
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("test1", "asdf1"));
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("test2", 8675309));
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("test3", 3.141));

    $this->assertFalse($this->mphpd->sticker("song", "test-song1.mp3")->get("test4"));

    $this->assertSame("asdf1", $this->mphpd->sticker("song", "test-song1.mp3")->get("test1"));
    $this->assertSame(8675309, (int)$this->mphpd->sticker("song", "test-song1.mp3")->get("test2"));
    $this->assertSame(3.141, (float)$this->mphpd->sticker("song", "test-song1.mp3")->get("test3"));
  }


  public function testInc()
  {
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("counter1", 5));
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("counter2", 3.141));

    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->increment("counter1", 3.141));
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->increment("counter2", 6));

    $this->assertEquals(8.141, (float)$this->mphpd->sticker("song", "test-song1.mp3")->get("counter1"));
    $this->assertEquals(9.141, (float)$this->mphpd->sticker("song", "test-song1.mp3")->get("counter2"));

  }

  public function testDec()
  {

    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("counter1", 5));
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("counter2", 3.141));

    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->decrement("counter1", 3.141));
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->decrement("counter2", 2));

    $this->assertEquals(1.859, (float)$this->mphpd->sticker("song", "test-song1.mp3")->get("counter1"));
    $this->assertEquals(1.141, (float)$this->mphpd->sticker("song", "test-song1.mp3")->get("counter2"));
  }


  public function testDelete()
  {
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("test1", "asdf1"));


    $this->assertFalse($this->mphpd->sticker("song", "test-song1.mp3")->delete("non-existent"));
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->delete("test1"));
    $this->assertFalse($this->mphpd->sticker("song", "test-song1.mp3")->get("test1"));
  }

  public function testFind()
  {

    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("test1", "asdf1"));
    $this->assertTrue($this->mphpd->sticker("song", "test-song2.mp3")->set("test1", 8675309));

    $r = $this->mphpd->sticker("song", "")->find("test1");
    $this->assertIsArray($r);
    $this->assertSame([
        [
          "file" => "test-song1.mp3",
          "sticker" => [
            0 => "test1",
            1 => "asdf1"
          ]
        ],[
          "file" => "test-song2.mp3",
          "sticker" => [
            0 => "test1",
            1 => "8675309"
          ]
        ]
      ], $r);

  }

  public function testList()
  {

    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("test1", "asdf1"));
    $this->assertTrue($this->mphpd->sticker("song", "test-song1.mp3")->set("test2", 8675309));

    $r = $this->mphpd->sticker("song", "test-song1.mp3")->list();
    $this->assertIsArray($r);
    $this->assertSame([
      "test1" => "asdf1",
      "test2" => "8675309"
    ], $r);
  }


}
