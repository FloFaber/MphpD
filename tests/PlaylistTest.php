<?php

require_once __DIR__ . "/../src/MphpD.php";
require_once __DIR__ . "/config/config.php";

use PHPUnit\Framework\TestCase;
use FloFaber\MphpD\MphpD;
use FloFaber\MphpD\Filter;

class PlaylistTest extends TestCase
{

  private MphpD $mphpd;

  public function __construct(?string $name = null, array $data = [], $dataName = '')
  {
    parent::__construct($name, $data, $dataName);
    $this->mphpd = new MphpD(MPD_CONFIG);
    $this->mphpd->connect();
  }

  public function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub

    $this->mphpd->queue()->clear();
    $this->mphpd->playlist("test")->load();
    $this->mphpd->playlist("test2")->save();

  }

  public function tearDown(): void
  {
    parent::tearDown(); // TODO: Change the autogenerated stub
    $this->mphpd->playlist("test2")->delete();
  }

  public function testRename()
  {
    $this->assertTrue($this->mphpd->playlist("test2")->rename("test3"));
    $this->assertTrue($this->mphpd->playlist("test3")->rename("test2"));
  }

  public function testSave()
  {
    $this->mphpd->playlist("test2")->delete();
    $this->assertTrue($this->mphpd->playlist("test2")->save(MPD_MODE_CREATE));

    if($this->mphpd->version_bte("0.24")){
      $this->assertTrue($this->mphpd->playlist("test2")->save(MPD_MODE_APPEND));
      $this->assertTrue($this->mphpd->playlist("test2")->save(MPD_MODE_REPLACE));
    }
  }

  public function testGet_songs()
  {
    $songs = $this->mphpd->playlist("test2")->get_songs();
    $this->assertIsArray($songs);
    $this->assertNotEmpty($songs);
  }

  public function testDelete()
  {
    $this->assertTrue($this->mphpd->playlist("test2")->delete());
  }

  public function testLoad()
  {
    $this->assertTrue($this->mphpd->playlist("test2")->load());
    $this->assertTrue($this->mphpd->playlist("test2")->load([1,], 0));
  }

  public function testMove_song()
  {
    $this->assertTrue($this->mphpd->playlist("test2")->move_song(0,1));
  }

  public function testAdd()
  {
    $this->assertTrue($this->mphpd->playlist("test2")->add("test-song1.mp3", 2));
  }

  public function testRemove_song()
  {
    $this->assertTrue($this->mphpd->playlist("test2")->remove_song(1));
  }

  public function testClear()
  {
    $this->assertTrue($this->mphpd->playlist("test2")->clear());
  }

  public function testExists()
  {
    $this->assertTrue($this->mphpd->playlist("test2")->exists());
    $this->assertFalse($this->mphpd->playlist("test-non-existent")->exists());
  }

  public function testAdd_search()
  {
    $this->assertTrue(
      $this->mphpd->playlist("test2")->add_search(new Filter("artist", "==", "fictional artist"))
    );
  }
}
